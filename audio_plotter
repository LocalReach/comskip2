import queue
from matplotlib.animation import FuncAnimation
import matplotlib.pyplot as plt
import numpy as np
import sounddevice as sd

device = 0   # ID of the audio device by default
window = 1000   # Window for the data
downsample = 1   # How many samples to drop
channels = [1]   # Audio channels
interval = 30   # Update interval in milliseconds for plot

q = queue.Queue()

device_info =  sd.query_devices(device, 'input')
samplerate = device_info['default_samplerate']
length = int(window*samplerate/(1000*downsample))

print("Sample Rate: ", samplerate)

# Creates a list of zeros
plotdata = np.zeros((length, len(channels)))

print("plotdata shape: ", plotdata.shape)

fig, ax = plt.subplots(figsize=(8,4))
ax.set_title("Live Audio Waveform Analyzer")

lines = ax.plot(plotdata, color=(5/255,112/255,242/255))

# Puts the data in queue
def audio_callback(indata, frames, time, status):
	q.put(indata[::downsample, [0]])


# Takes frame of audio samples from the queue and update to the lines
def update_plot(frames):
	global plotdata
	while True:
		try: 
			data = q.get_nowait()
			
		except queue.Empty:
			break
		
		shift = len(data)
		plotdata = np.roll(plotdata, -shift, axis=0)
		# Elements that roll beyond the last position are re-introduced 
		plotdata[-shift:,:] = data
		
	for column, line in enumerate(lines):
		line.set_ydata(plotdata[:, column])
		
	return lines


ax.set_facecolor((1,1,1))
plt.xlabel("Time")
ax.yaxis.grid(True)
plt.ylim(-0.1,0.1)
plt.xticks([])

# INPUT FROM MIC
stream = sd.InputStream(device=device, channels=max(channels), samplerate=samplerate, callback=audio_callback)
	
animation = FuncAnimation(fig, update_plot, interval=interval, blit=True, cache_frame_data=False)

with stream:
	plt.show()

